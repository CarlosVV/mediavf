//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoTrade.MarketData.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial interface IMarketDataRepository
    {
        IDbSet<DataProvider> DataProviders { get; set; }
        DbQuery<DataProvider> DataProvidersQuery { get; }
    
        IDbSet<Module> Modules { get; set; }
        DbQuery<Module> ModulesQuery { get; }
    
        IDbSet<ModuleDependency> ModuleDependencies { get; set; }
        DbQuery<ModuleDependency> ModuleDependenciesQuery { get; }
    
        IDbSet<Stock> Stocks { get; set; }
        DbQuery<Stock> StocksQuery { get; }
    
        IDbSet<StockListProvider> StockListProviders { get; set; }
        DbQuery<StockListProvider> StockListProvidersQuery { get; }
    
        IDbSet<StockQuote> StockQuotes { get; set; }
        DbQuery<StockQuote> StockQuotesQuery { get; }
    
        IDbSet<Subscription> Subscriptions { get; set; }
        DbQuery<Subscription> SubscriptionsQuery { get; }
    
        IDbSet<EmailFeedConfiguration> EmailFeedConfigurations { get; set; }
        DbQuery<EmailFeedConfiguration> EmailFeedConfigurationsQuery { get; }
    
        IDbSet<Industry> Industries { get; set; }
        DbQuery<Industry> IndustriesQuery { get; }
    
        IDbSet<Sector> Sectors { get; set; }
        DbQuery<Sector> SectorsQuery { get; }
    
    
    	int SaveChanges();
    }
    
    public partial class MarketDataRepository : DbContext, IMarketDataRepository
    {
        public MarketDataRepository()
            : base("name=MarketDataRepository")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public IDbSet<DataProvider> DataProviders { get; set; }
        public DbQuery<DataProvider> DataProvidersQuery { get { return DataProviders as DbQuery<DataProvider>; } }
    
        public IDbSet<Module> Modules { get; set; }
        public DbQuery<Module> ModulesQuery { get { return Modules as DbQuery<Module>; } }
    
        public IDbSet<ModuleDependency> ModuleDependencies { get; set; }
        public DbQuery<ModuleDependency> ModuleDependenciesQuery { get { return ModuleDependencies as DbQuery<ModuleDependency>; } }
    
        public IDbSet<Stock> Stocks { get; set; }
        public DbQuery<Stock> StocksQuery { get { return Stocks as DbQuery<Stock>; } }
    
        public IDbSet<StockListProvider> StockListProviders { get; set; }
        public DbQuery<StockListProvider> StockListProvidersQuery { get { return StockListProviders as DbQuery<StockListProvider>; } }
    
        public IDbSet<StockQuote> StockQuotes { get; set; }
        public DbQuery<StockQuote> StockQuotesQuery { get { return StockQuotes as DbQuery<StockQuote>; } }
    
        public IDbSet<Subscription> Subscriptions { get; set; }
        public DbQuery<Subscription> SubscriptionsQuery { get { return Subscriptions as DbQuery<Subscription>; } }
    
        public IDbSet<EmailFeedConfiguration> EmailFeedConfigurations { get; set; }
        public DbQuery<EmailFeedConfiguration> EmailFeedConfigurationsQuery { get { return EmailFeedConfigurations as DbQuery<EmailFeedConfiguration>; } }
    
        public IDbSet<Industry> Industries { get; set; }
        public DbQuery<Industry> IndustriesQuery { get { return Industries as DbQuery<Industry>; } }
    
        public IDbSet<Sector> Sectors { get; set; }
        public DbQuery<Sector> SectorsQuery { get { return Sectors as DbQuery<Sector>; } }
    
    }
}
