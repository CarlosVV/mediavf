//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExternalServicesPOC
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ExternalServicesPOC.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MediaVF.Common.Entities;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'FacebookService' DomainService.
    /// </summary>
    public sealed partial class FacebookContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacebookContext"/> class.
        /// </summary>
        public FacebookContext() : 
                this(new WebDomainClient<IFacebookServiceContract>(new Uri("ExternalServicesPOC-Web-FacebookService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacebookContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FacebookService service URI.</param>
        public FacebookContext(Uri serviceUri) : 
                this(new WebDomainClient<IFacebookServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacebookContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FacebookContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Band"/> entity instances that have been loaded into this <see cref="FacebookContext"/> instance.
        /// </summary>
        public EntitySet<Band> Bands
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Band>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Band"/> entity instances using the 'GetBands' query.
        /// </summary>
        /// <param name="accessToken">The value for the 'accessToken' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Band"/> entity instances.</returns>
        public EntityQuery<Band> GetBandsQuery(string accessToken)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("accessToken", accessToken);
            this.ValidateMethod("GetBandsQuery", parameters);
            return base.CreateQuery<Band>("GetBands", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAccessToken' method of the DomainService.
        /// </summary>
        /// <param name="accessTokenUrl">The value for the 'accessTokenUrl' parameter of this action.</param>
        /// <param name="applicationID">The value for the 'applicationID' parameter of this action.</param>
        /// <param name="redirectUrl">The value for the 'redirectUrl' parameter of this action.</param>
        /// <param name="applicationSecret">The value for the 'applicationSecret' parameter of this action.</param>
        /// <param name="authorizationCode">The value for the 'authorizationCode' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetAccessToken(string accessTokenUrl, string applicationID, string redirectUrl, string applicationSecret, string authorizationCode, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("accessTokenUrl", accessTokenUrl);
            parameters.Add("applicationID", applicationID);
            parameters.Add("redirectUrl", redirectUrl);
            parameters.Add("applicationSecret", applicationSecret);
            parameters.Add("authorizationCode", authorizationCode);
            this.ValidateMethod("GetAccessToken", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetAccessToken", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetAccessToken' method of the DomainService.
        /// </summary>
        /// <param name="accessTokenUrl">The value for the 'accessTokenUrl' parameter of this action.</param>
        /// <param name="applicationID">The value for the 'applicationID' parameter of this action.</param>
        /// <param name="redirectUrl">The value for the 'redirectUrl' parameter of this action.</param>
        /// <param name="applicationSecret">The value for the 'applicationSecret' parameter of this action.</param>
        /// <param name="authorizationCode">The value for the 'authorizationCode' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetAccessToken(string accessTokenUrl, string applicationID, string redirectUrl, string applicationSecret, string authorizationCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("accessTokenUrl", accessTokenUrl);
            parameters.Add("applicationID", applicationID);
            parameters.Add("redirectUrl", redirectUrl);
            parameters.Add("applicationSecret", applicationSecret);
            parameters.Add("authorizationCode", authorizationCode);
            this.ValidateMethod("GetAccessToken", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetAccessToken", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FacebookContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FacebookService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFacebookServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAccessToken' operation.
            /// </summary>
            /// <param name="accessTokenUrl">The value for the 'accessTokenUrl' parameter of this action.</param>
            /// <param name="applicationID">The value for the 'applicationID' parameter of this action.</param>
            /// <param name="redirectUrl">The value for the 'redirectUrl' parameter of this action.</param>
            /// <param name="applicationSecret">The value for the 'applicationSecret' parameter of this action.</param>
            /// <param name="authorizationCode">The value for the 'authorizationCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FacebookService/GetAccessTokenDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FacebookService/GetAccessToken", ReplyAction="http://tempuri.org/FacebookService/GetAccessTokenResponse")]
            IAsyncResult BeginGetAccessToken(string accessTokenUrl, string applicationID, string redirectUrl, string applicationSecret, string authorizationCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAccessToken'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAccessToken'.</param>
            /// <returns>The 'String' returned from the 'GetAccessToken' operation.</returns>
            string EndGetAccessToken(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBands' operation.
            /// </summary>
            /// <param name="accessToken">The value for the 'accessToken' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FacebookService/GetBandsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FacebookService/GetBands", ReplyAction="http://tempuri.org/FacebookService/GetBandsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBands(string accessToken, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBands'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBands'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBands' operation.</returns>
            QueryResult<Band> EndGetBands(IAsyncResult result);
        }
        
        internal sealed class FacebookContextEntityContainer : EntityContainer
        {
            
            public FacebookContextEntityContainer()
            {
                this.CreateEntitySet<Band>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SearchService' DomainService.
    /// </summary>
    public sealed partial class SearchContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContext"/> class.
        /// </summary>
        public SearchContext() : 
                this(new WebDomainClient<ISearchServiceContract>(new Uri("ExternalServicesPOC-Web-SearchService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SearchService service URI.</param>
        public SearchContext(Uri serviceUri) : 
                this(new WebDomainClient<ISearchServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SearchContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSearchResults' method of the DomainService.
        /// </summary>
        /// <param name="keywordText">The value for the 'keywordText' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetSearchResults(string keywordText, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("keywordText", keywordText);
            this.ValidateMethod("GetSearchResults", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetSearchResults", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSearchResults' method of the DomainService.
        /// </summary>
        /// <param name="keywordText">The value for the 'keywordText' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetSearchResults(string keywordText)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("keywordText", keywordText);
            this.ValidateMethod("GetSearchResults", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetSearchResults", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SearchContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SearchService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISearchServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSearchResults' operation.
            /// </summary>
            /// <param name="keywordText">The value for the 'keywordText' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SearchService/GetSearchResultsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SearchService/GetSearchResults", ReplyAction="http://tempuri.org/SearchService/GetSearchResultsResponse")]
            IAsyncResult BeginGetSearchResults(string keywordText, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSearchResults'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSearchResults'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetSearchResults' operation.</returns>
            IEnumerable<string> EndGetSearchResults(IAsyncResult result);
        }
        
        internal sealed class SearchContextEntityContainer : EntityContainer
        {
            
            public SearchContextEntityContainer()
            {
            }
        }
    }
}
namespace MediaVF.Common.Entities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Band' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MediaVF.Common.Entities")]
    public sealed partial class Band : Entity
    {
        
        private long _facebookID;
        
        private IEnumerable<int> _genreIDs;
        
        private List<BandGenre> _genres;
        
        private string _hometown;
        
        private int _id;
        
        private Label _label;
        
        private int _labelID;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFacebookIDChanging(long value);
        partial void OnFacebookIDChanged();
        partial void OnGenreIDsChanging(IEnumerable<int> value);
        partial void OnGenreIDsChanged();
        partial void OnGenresChanging(List<BandGenre> value);
        partial void OnGenresChanged();
        partial void OnHometownChanging(string value);
        partial void OnHometownChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLabelChanging(Label value);
        partial void OnLabelChanged();
        partial void OnLabelIDChanging(int value);
        partial void OnLabelIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Band"/> class.
        /// </summary>
        public Band()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FacebookID' value.
        /// </summary>
        [DataMember()]
        public long FacebookID
        {
            get
            {
                return this._facebookID;
            }
            set
            {
                if ((this._facebookID != value))
                {
                    this.OnFacebookIDChanging(value);
                    this.RaiseDataMemberChanging("FacebookID");
                    this.ValidateProperty("FacebookID", value);
                    this._facebookID = value;
                    this.RaiseDataMemberChanged("FacebookID");
                    this.OnFacebookIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GenreIDs' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<int> GenreIDs
        {
            get
            {
                return this._genreIDs;
            }
            set
            {
                if ((this._genreIDs != value))
                {
                    this.OnGenreIDsChanging(value);
                    this.RaiseDataMemberChanging("GenreIDs");
                    this.ValidateProperty("GenreIDs", value);
                    this._genreIDs = value;
                    this.RaiseDataMemberChanged("GenreIDs");
                    this.OnGenreIDsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Genres' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<BandGenre> Genres
        {
            get
            {
                return this._genres;
            }
            set
            {
                if ((this._genres != value))
                {
                    this.OnGenresChanging(value);
                    this.RaiseDataMemberChanging("Genres");
                    this.ValidateProperty("Genres", value);
                    this._genres = value;
                    this.RaiseDataMemberChanged("Genres");
                    this.OnGenresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Hometown' value.
        /// </summary>
        [DataMember()]
        public string Hometown
        {
            get
            {
                return this._hometown;
            }
            set
            {
                if ((this._hometown != value))
                {
                    this.OnHometownChanging(value);
                    this.RaiseDataMemberChanging("Hometown");
                    this.ValidateProperty("Hometown", value);
                    this._hometown = value;
                    this.RaiseDataMemberChanged("Hometown");
                    this.OnHometownChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Label' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Label Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    this.OnLabelChanging(value);
                    this.RaiseDataMemberChanging("Label");
                    this.ValidateProperty("Label", value);
                    this._label = value;
                    this.RaiseDataMemberChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LabelID' value.
        /// </summary>
        [DataMember()]
        public int LabelID
        {
            get
            {
                return this._labelID;
            }
            set
            {
                if ((this._labelID != value))
                {
                    this.OnLabelIDChanging(value);
                    this.RaiseDataMemberChanging("LabelID");
                    this.ValidateProperty("LabelID", value);
                    this._labelID = value;
                    this.RaiseDataMemberChanged("LabelID");
                    this.OnLabelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'BandGenre' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MediaVF.Common.Entities")]
    public sealed partial class BandGenre : ComplexObject
    {
        
        private int _bandID;
        
        private Genre _genre;
        
        private int _genreID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBandIDChanging(int value);
        partial void OnBandIDChanged();
        partial void OnGenreChanging(Genre value);
        partial void OnGenreChanged();
        partial void OnGenreIDChanging(int value);
        partial void OnGenreIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BandGenre"/> class.
        /// </summary>
        public BandGenre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BandID' value.
        /// </summary>
        [DataMember()]
        public int BandID
        {
            get
            {
                return this._bandID;
            }
            set
            {
                if ((this._bandID != value))
                {
                    this.OnBandIDChanging(value);
                    this.RaiseDataMemberChanging("BandID");
                    this.ValidateProperty("BandID", value);
                    this._bandID = value;
                    this.RaiseDataMemberChanged("BandID");
                    this.OnBandIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Genre' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Genre Genre
        {
            get
            {
                return this._genre;
            }
            set
            {
                if ((this._genre != value))
                {
                    this.OnGenreChanging(value);
                    this.RaiseDataMemberChanging("Genre");
                    this.ValidateProperty("Genre", value);
                    this._genre = value;
                    this.RaiseDataMemberChanged("Genre");
                    this.OnGenreChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GenreID' value.
        /// </summary>
        [DataMember()]
        public int GenreID
        {
            get
            {
                return this._genreID;
            }
            set
            {
                if ((this._genreID != value))
                {
                    this.OnGenreIDChanging(value);
                    this.RaiseDataMemberChanging("GenreID");
                    this.ValidateProperty("GenreID", value);
                    this._genreID = value;
                    this.RaiseDataMemberChanged("GenreID");
                    this.OnGenreIDChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Genre' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MediaVF.Common.Entities")]
    public sealed partial class Genre : ComplexObject
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Genre"/> class.
        /// </summary>
        public Genre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Label' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MediaVF.Common.Entities")]
    public sealed partial class Label : ComplexObject
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Label"/> class.
        /// </summary>
        public Label()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
    }
}
